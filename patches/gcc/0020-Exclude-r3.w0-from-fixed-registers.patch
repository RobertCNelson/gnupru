From d906c94f7f77008d7aa273cada5dc9c11f41d064 Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dimitar@dinux.eu>
Date: Wed, 5 Jun 2019 06:54:41 +0300
Subject: [PATCH 20/22] Exclude r3.w0 from fixed registers

Signed-off-by: Dimitar Dimitrov <dimitar@dinux.eu>
---
 gcc/config/pru/pru.h                                           |  4 ++--
 .../gcc.target/pru/lra-framepointer-fragmentation-1.c          |  3 ++-
 .../gcc.target/pru/lra-framepointer-fragmentation-2.c          | 10 ++++++----
 3 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/gcc/config/pru/pru.h b/gcc/config/pru/pru.h
index e78d4db041e..1e63992c3cb 100644
--- a/gcc/config/pru/pru.h
+++ b/gcc/config/pru/pru.h
@@ -152,7 +152,7 @@
 
 #define FIXED_REGISTERS				\
   {						\
-/*   0 */  0,0,0,0, 0,0,0,0, 1,1,1,1, 1,1,1,1,	\
+/*   0 */  0,0,0,0, 0,0,0,0, 1,1,1,1, 0,0,1,1,	\
 /*   4 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
 /*   8 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
 /*  12 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
@@ -166,7 +166,7 @@
 /* Call used == caller saved + fixed regs + args + ret vals.  */
 #define CALL_USED_REGISTERS			\
   {						\
-/*   0 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1,	\
+/*   0 */  1,1,1,1, 1,1,1,1, 1,1,1,1, 0,0,1,1,	\
 /*   4 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
 /*   8 */  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,	\
 /*  12 */  0,0,0,0, 0,0,0,0, 1,1,1,1, 1,1,1,1,	\
diff --git a/gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-1.c b/gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-1.c
index ee1288fc2ae..1432485e28f 100644
--- a/gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-1.c
+++ b/gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-1.c
@@ -12,6 +12,7 @@ uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,
   uint64_t l1 = 0x12345678, l2 = 0x87654321, l3 = 1001, l4 = 1002;
   uint64_t l5 = 1004;
   uint32_t l6 = 2005;
+  uint16_t l7 = 2005;
   uint8_t c1 = 101, c2 = 102;
 
   /* The numerous dummy asm input operands create just
@@ -25,7 +26,7 @@ uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,
        "r"(c), "r"(d), "r"(e), "r"(f),
        "r"(g), "r"(h), "r"(l2),
        "r"(c1), "r"(c2),
-       "r"(l3), "r"(l4), "r"(l5), "r"(l6));
+       "r"(l3), "r"(l4), "r"(l5), "r"(l6), "r"(l7));
 
   global = a+b+c+d+e+f+g+h + c1+c2 + l2;
 
diff --git a/gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-2.c b/gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-2.c
index 6c98e9bf13b..4698b4f9a85 100644
--- a/gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-2.c
+++ b/gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-2.c
@@ -14,6 +14,7 @@ uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,
   uint64_t l1 = 0x12345678, l2 = 0x87654321, l3 = 1001, l4 = 1002;
   uint64_t l5 = 1004;
   uint32_t l6 = 2005;
+  uint16_t l7 = 3006;
   uint8_t c1 = 101, c2 = 102;
 
   /* The numerous dummy asm input operands create just
@@ -36,13 +37,14 @@ uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,
        "add %0, %0, %14\n\t"
        "add %0, %0, %15\n\t"
        "add %0, %0, %16\n\t"
+       "add %0, %0, %17\n\t"
        : "=r" (l1)
        : "0" (l1), "r" (a), "r"(b),
        "r"(c), "r"(d), "r"(e), "r"(f),
        "r"(g), "r"(h), "r"(c1), "r"(c2),
-       "r"(l2), "r"(l3), "r"(l4), "r"(l5), "r"(l6));
+       "r"(l2), "r"(l3), "r"(l4), "r"(l5), "r"(l6), "r"(l7));
 
-  global = a+b+c+d+e+f+g+h + c1+c2 + l2+l3+l4+l5+l6;
+  global = a+b+c+d+e+f+g+h + c1+c2 + l2+l3+l4+l5+l6+l7;
 
   return l1;
 }
@@ -51,10 +53,10 @@ int main()
 {
   uint64_t a = test(1, 2, 3, 4, 5, 6, 7, 8);
 
-  if (a != 0x98878ae8) {
+  if (a != 0x988796a6) {
     abort();
   }
-  if (global != 0x876557a4) {
+  if (global != 0x87656362) {
     abort();
   }
   return 0;
-- 
2.11.0


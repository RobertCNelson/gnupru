From 18a6c150d023facf3a03707b64da2d3baa4fc646 Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dimitar@dinux.eu>
Date: Tue, 9 Oct 2018 22:34:39 +0300
Subject: [PATCH 18/19] Optimize FP semantics

Since unsigned memory offsets are much cheaper on PRU, let's put FP
at the beginning of the local frame, instead of the weird FP-save-offset.

Signed-off-by: Dimitar Dimitrov <dimitar@dinux.eu>
---
 gcc/config/pru/pru.c | 40 ++++++++++++----------------------------
 1 file changed, 12 insertions(+), 28 deletions(-)

diff --git a/gcc/config/pru/pru.c b/gcc/config/pru/pru.c
index dcd28e9ba16..f26c01dd356 100644
--- a/gcc/config/pru/pru.c
+++ b/gcc/config/pru/pru.c
@@ -77,13 +77,11 @@ struct GTY (()) machine_function
   /* Number of bytes that variables take up.  */
   int var_size;
   /* Number of bytes that outgoing arguments take up.  */
-  int args_size;
+  int out_args_size;
   /* Number of bytes needed to store registers in frame.  */
   int save_reg_size;
   /* Offset from new stack pointer to store registers.  */
   int save_regs_offset;
-  /* Offset from save_regs_offset to store frame pointer register.  */
-  int fp_save_offset;
   /* True if final frame layout is already calculated.  */
   bool initialized;
   /* Number of doloop tags used so far.  */
@@ -125,17 +123,6 @@ pru_compute_frame_layout (void)
 	save_reg_size += 1;
       }
 
-  cfun->machine->fp_save_offset = 0;
-  if (TEST_HARD_REG_BIT (*save_mask, HARD_FRAME_POINTER_REGNUM))
-    {
-      int fp_save_offset = 0;
-      for (regno = 0; regno < HARD_FRAME_POINTER_REGNUM; regno++)
-	if (TEST_HARD_REG_BIT (*save_mask, regno))
-	  fp_save_offset += 1;
-
-      cfun->machine->fp_save_offset = fp_save_offset;
-    }
-
   save_reg_size = PRU_STACK_ALIGN (save_reg_size);
   total_size += save_reg_size;
   total_size += PRU_STACK_ALIGN (crtl->args.pretend_args_size);
@@ -143,7 +130,7 @@ pru_compute_frame_layout (void)
   /* Save other computed information.  */
   cfun->machine->total_size = total_size;
   cfun->machine->var_size = var_size;
-  cfun->machine->args_size = out_args_size;
+  cfun->machine->out_args_size = out_args_size;
   cfun->machine->save_reg_size = save_reg_size;
   cfun->machine->initialized = reload_completed;
   cfun->machine->save_regs_offset = out_args_size + var_size;
@@ -315,16 +302,14 @@ pru_expand_prologue (void)
     regno_start = xbbo_next_reg_cluster (regno_start, &save_offset, true);
   while (regno_start >= 0);
 
-  if (frame_pointer_needed)
-    {
-      int fp_save_offset = save_regs_base + cfun->machine->fp_save_offset;
-      pru_add3_frame_adjust (hard_frame_pointer_rtx, stack_pointer_rtx,
-			     fp_save_offset, REG_NOTE_MAX, NULL_RTX);
-    }
-
   if (sp_offset)
     pru_add_to_sp (sp_offset, REG_FRAME_RELATED_EXPR);
 
+  if (frame_pointer_needed)
+    pru_add3_frame_adjust (hard_frame_pointer_rtx, stack_pointer_rtx,
+			   cfun->machine->out_args_size, REG_NOTE_MAX,
+			   NULL_RTX);
+
   /* If we are profiling, make sure no instructions are scheduled before
      the call to mcount.  */
   if (crtl->profile)
@@ -357,7 +342,7 @@ pru_expand_epilogue (bool sibcall_p)
 			       (total_frame_size
 				- cfun->machine->save_regs_offset));
       pru_add3_frame_adjust (stack_pointer_rtx, hard_frame_pointer_rtx,
-			     -cfun->machine->fp_save_offset,
+			     cfun->machine->var_size,
 			     REG_CFA_DEF_CFA, cfa_adj);
 
       save_offset = 0;
@@ -424,8 +409,8 @@ pru_dump_frame_layout (FILE *file)
 	   cfun->machine->total_size);
   fprintf (file, "\t%s var_size = %d\n", ASM_COMMENT_START,
 	   cfun->machine->var_size);
-  fprintf (file, "\t%s args_size = %d\n", ASM_COMMENT_START,
-	   cfun->machine->args_size);
+  fprintf (file, "\t%s out_args_size = %d\n", ASM_COMMENT_START,
+	   cfun->machine->out_args_size);
   fprintf (file, "\t%s save_reg_size = %d\n", ASM_COMMENT_START,
 	   cfun->machine->save_reg_size);
   fprintf (file, "\t%s initialized = %d\n", ASM_COMMENT_START,
@@ -483,7 +468,7 @@ pru_initial_elimination_offset (int from, int to)
   switch (from)
     {
     case FRAME_POINTER_REGNUM:
-      offset = cfun->machine->args_size;
+      offset = cfun->machine->out_args_size;
       break;
 
     case ARG_POINTER_REGNUM:
@@ -498,8 +483,7 @@ pru_initial_elimination_offset (int from, int to)
   /* If we are asked for the frame pointer offset, then adjust OFFSET
      by the offset from the frame pointer to the stack pointer.  */
   if (to == HARD_FRAME_POINTER_REGNUM)
-    offset -= (cfun->machine->save_regs_offset
-	       + cfun->machine->fp_save_offset);
+    offset -= cfun->machine->out_args_size;
 
   return offset;
 }
-- 
2.11.0


From 0dbb6d0c171a26117adb838e82bfa1c57b25d739 Mon Sep 17 00:00:00 2001
From: Dimitar Dimitrov <dimitar@dinux.eu>
Date: Sun, 11 Mar 2018 22:16:40 +0200
Subject: [PATCH 4/7] PRU: HACK: Add ABI compatibility functions

Signed-off-by: Dimitar Dimitrov <dimitar@dinux.eu>
---
 newlib/libc/include/math.h    | 37 +++++++++++++++++++++++++++++++++++++
 newlib/libm/common/s_round.c  |  4 +++-
 newlib/libm/common/s_trunc.c  |  4 +++-
 newlib/libm/common/sf_round.c |  6 +++---
 newlib/libm/common/sf_trunc.c |  4 +++-
 5 files changed, 49 insertions(+), 6 deletions(-)

diff --git a/newlib/libc/include/math.h b/newlib/libc/include/math.h
index 1efc5b92c..545fc652e 100644
--- a/newlib/libc/include/math.h
+++ b/newlib/libc/include/math.h
@@ -305,10 +305,29 @@ extern double tgamma (double);
 extern double nearbyint (double);
 extern long int lrint (double);
 extern long long int llrint (double);
+#ifdef __PRU__
+extern double __pruabi_nround (double);
+/* libc++ requires a real function, so cannot use a macro.  */
+static inline __attribute__((always_inline))
+double round (double a)
+{
+  return __pruabi_nround(a);
+}
+#else
 extern double round (double);
+#endif
 extern long int lround (double);
 extern long long int llround (double);
+#ifdef __PRU__
+extern double __pruabi_trunc (double);
+static inline __attribute__((always_inline))
+double trunc (double a)
+{
+  return __pruabi_trunc(a);
+}
+#else
 extern double trunc (double);
+#endif
 extern double remquo (double, double, int *);
 extern double fdim (double, double);
 extern double fmax (double, double);
@@ -375,10 +394,28 @@ extern float tgammaf (float);
 extern float nearbyintf (float);
 extern long int lrintf (float);
 extern long long int llrintf (float);
+#ifdef __PRU__
+extern float __pruabi_roundf (float);
+static inline __attribute__((always_inline))
+float roundf (float a)
+{
+  return __pruabi_roundf(a);
+}
+#else
 extern float roundf (float);
+#endif
 extern long int lroundf (float);
 extern long long int llroundf (float);
+#ifdef __PRU__
+extern float __pruabi_truncf (float);
+static inline __attribute__((always_inline))
+float truncf (float a)
+{
+  return __pruabi_truncf(a);
+}
+#else
 extern float truncf (float);
+#endif
 extern float remquof (float, float, int *);
 extern float fdimf (float, float);
 extern float fmaxf (float, float);
diff --git a/newlib/libm/common/s_round.c b/newlib/libm/common/s_round.c
index e3a91d6c2..0aabe1234 100644
--- a/newlib/libm/common/s_round.c
+++ b/newlib/libm/common/s_round.c
@@ -45,7 +45,9 @@ SEEALSO
 
 #ifndef _DOUBLE_IS_32BITS
 
-#ifdef __STDC__
+#ifdef __PRU__
+	double __pruabi_nround(double x)
+#elif defined(__STDC__)
 	double round(double x)
 #else
 	double round(x)
diff --git a/newlib/libm/common/s_trunc.c b/newlib/libm/common/s_trunc.c
index 0e06add22..e47a5aead 100644
--- a/newlib/libm/common/s_trunc.c
+++ b/newlib/libm/common/s_trunc.c
@@ -42,7 +42,9 @@ ANSI C, POSIX
 
 #ifndef _DOUBLE_IS_32BITS
 
-#ifdef __STDC__
+#ifdef __PRU__
+	double __pruabi_trunc(double x)
+#elif defined(__STDC__)
 	double trunc(double x)
 #else
 	double trunc(x)
diff --git a/newlib/libm/common/sf_round.c b/newlib/libm/common/sf_round.c
index c8f1d7733..4917fe29a 100644
--- a/newlib/libm/common/sf_round.c
+++ b/newlib/libm/common/sf_round.c
@@ -11,9 +11,9 @@
 
 #include "fdlibm.h"
 
-#ifdef __STDC__
-	float roundf(float x)
-#else
+#ifdef __PRU__
+	float __pruabi_roundf(float x)
+#elif defined(__STDC__)
 	float roundf(x)
 	float x;
 #endif
diff --git a/newlib/libm/common/sf_trunc.c b/newlib/libm/common/sf_trunc.c
index 74ea933ce..75207bf13 100644
--- a/newlib/libm/common/sf_trunc.c
+++ b/newlib/libm/common/sf_trunc.c
@@ -11,7 +11,9 @@
 
 #include "fdlibm.h"
 
-#ifdef __STDC__
+#ifdef __PRU__
+	float __pruabi_truncf(float x)
+#elif defined(__STDC__)
 	float truncf(float x)
 #else
 	float truncf(x)
-- 
2.11.0

